// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repo

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockUserRepo creates a new instance of MockUserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepo {
	mock := &MockUserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserRepo is an autogenerated mock type for the UserRepo type
type MockUserRepo struct {
	mock.Mock
}

type MockUserRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepo) EXPECT() *MockUserRepo_Expecter {
	return &MockUserRepo_Expecter{mock: &_m.Mock}
}

// AddUser provides a mock function for the type MockUserRepo
func (_mock *MockUserRepo) AddUser(username string, password string) error {
	ret := _mock.Called(username, password)

	if len(ret) == 0 {
		panic("no return value specified for AddUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(username, password)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserRepo_AddUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUser'
type MockUserRepo_AddUser_Call struct {
	*mock.Call
}

// AddUser is a helper method to define mock.On call
//   - username string
//   - password string
func (_e *MockUserRepo_Expecter) AddUser(username interface{}, password interface{}) *MockUserRepo_AddUser_Call {
	return &MockUserRepo_AddUser_Call{Call: _e.mock.On("AddUser", username, password)}
}

func (_c *MockUserRepo_AddUser_Call) Run(run func(username string, password string)) *MockUserRepo_AddUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserRepo_AddUser_Call) Return(err error) *MockUserRepo_AddUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserRepo_AddUser_Call) RunAndReturn(run func(username string, password string) error) *MockUserRepo_AddUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function for the type MockUserRepo
func (_mock *MockUserRepo) GetUser(userID string) (string, error) {
	ret := _mock.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(userID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(userID)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepo_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockUserRepo_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - userID string
func (_e *MockUserRepo_Expecter) GetUser(userID interface{}) *MockUserRepo_GetUser_Call {
	return &MockUserRepo_GetUser_Call{Call: _e.mock.On("GetUser", userID)}
}

func (_c *MockUserRepo_GetUser_Call) Run(run func(userID string)) *MockUserRepo_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserRepo_GetUser_Call) Return(s string, err error) *MockUserRepo_GetUser_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockUserRepo_GetUser_Call) RunAndReturn(run func(userID string) (string, error)) *MockUserRepo_GetUser_Call {
	_c.Call.Return(run)
	return _c
}
